#!/usr/bin/python2

import argparse
import os
from os.path import join, dirname, basename, exists, abspath
import subprocess
import shutil


COMPILER = "emcc"
#CC_OPTS = "-O1 -fopenmp -s ALLOW_MEMORY_GROWTH=1 --js-library jan.js"
CC_OPTS = "-O3 -fopenmp -s ALLOW_MEMORY_GROWTH=1"
FLAGS = []
LIB_DIR = "/home/atlas/newhome/compiler/atlas/lib/"
#LIB_FILES = ["jan.js"]
LIB_FILES = []
OTHER_FLAGS = []


def setFlags(args,LIB_FILE):
    global LIB_FILES
    if args.serial:
        LOCAL_FLAGS = CC_OPTS +  " --js-library " + basename(LIB_FILE) + " --memory-init-file 0"
        FLAGS.append((LOCAL_FLAGS,"_local.js"))
        LIB_FILES += [LIB_FILE]
    else:
        SERVER_FLAGS = CC_OPTS + " --js-library " + basename(LIB_FILE) + " --memory-init-file 0"
        FLAGS.append((SERVER_FLAGS,"_server.js"))
        CLIENT_FLAGS = CC_OPTS + " --js-library " + basename(LIB_FILE) + " --memory-init-file 0 --pre-js preAdd.js"
        FLAGS.append((CLIENT_FLAGS,"_client.js"))
        LIB_FILES += [LIB_FILE, LIB_DIR+"preAdd.js"]


parser = argparse.ArgumentParser(description = "Distributed OpenMP runtime for Emscripten")
parser.add_argument('--serial', action='store_true', help='execute serially (no distribution)')
parser.add_argument('--jobs', default=10, help="number of jobs (if specified in C file)")
parser.add_argument('-o', metavar="output", help='output basename', required=True)
parser.add_argument('--flags', default = "")
parser.add_argument('files', metavar='source files', type = str, nargs='*', help='all C source files that need to be compiled, along with compiler flags')

args = parser.parse_args()

OTHER_FLAGS += args.flags.split()

if args.serial:
    LIB_FILE = "/home/atlas/newhome/compiler/atlas/lib/libSerial.js"
else:
    LIB_FILE = "/home/atlas/newhome/compiler/atlas/lib/lib.js"

setFlags(args,LIB_FILE)

CURDIR = os.getcwd()
WORKDIR = join(CURDIR,"tmp")
try:
    os.mkdir(WORKDIR)
except:
    shutil.rmtree(WORKDIR)
    os.mkdir(WORKDIR)

FILES = map(abspath, args.files)
print FILES

print len(FILES)
for f in list(FILES):
    deps = subprocess.check_output(["gcc","-MM",f])
    print deps
    FILES += map(str.strip,deps.split("\\")[1:])

print FILES

for f in FILES:
    shutil.copy(f, WORKDIR)

for f in LIB_FILES:
    shutil.copy(join(CURDIR,f), WORKDIR)

os.chdir(WORKDIR)
with open(basename(LIB_FILE),'r+') as f:
    libtxt = f.read()
    subtxt = libtxt.replace("ATLAS_NUM_THREADS",str(args.jobs)).replace(
        "ATLAS_BASENAME",basename(args.o))
    f.seek(0)
    f.write(subtxt)
    f.truncate()


if not exists(join(WORKDIR,dirname(args.o))):
    os.makedirs(join(WORKDIR,dirname(args.o)))


for flag in FLAGS:
    call_str = [COMPILER] + map(basename,args.files)+flag[0].split()+["-o",args.o+flag[1]]+OTHER_FLAGS
    print(' '.join(call_str))
    subprocess.call(call_str)

for flag in FLAGS:
    OUTPUT_DIR = join(CURDIR,dirname(args.o))
    if not exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
    shutil.copy(join(WORKDIR,args.o+flag[1]),OUTPUT_DIR)

os.chdir(CURDIR)
shutil.rmtree(WORKDIR)
